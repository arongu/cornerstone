[ ??? ] change account_service to something else
[  ] authorization
[  ] initial JWT
[  ] JWT get/set etc
[  ] class names account service?
[ ] SQL log messages should have some more standardized form, make it happen
[ TODO ] Proper TODO list
todo account service there should be no nulls replace with them no such element exceptions

datasources --- check

[ TODO ] REVIEW SQL MESSAGES make them uniform error code, message, sql state etc...

Key service:
    - node should be able to generate its own encryption key
    - store it in the db
                        - rotate it
                            - first key
                            - when to rotate it ?
                            - issuer node-name ??

    go to DB -> check if node has its own SSL key
                    -> it has to have its own node id
                        -> pubkeys (nodeId)
                        -> date is not expired
                        -> if it has a valid key
                            -> get it and use it for signing JJWTs
                        -> if it has no valid key create a new one store locally
                            and save its public part into to the db

    when a key is valid?
        - date?



  - getKey
        - node's key
        - key based on id
  - deleteKey
  - createNewKey


  ---------
  DB-be
    - pubkey private key is in use
    - experiation date - date + JWT valid time -- to be safe to delete
    - get its own key
    - delete keys that are no longer in use

NTP required
======================================

======================================
node
    -> CREATES PRIVATE KEY WITH TTL in local
        -> PUBLISH PUBLIC KEY TO DB with TLL
           DB sets expire TS

    -> node uses key until it expires
       - when it does
       - it gets the list of the expired KEYS
       - LOGS them
       - and executes cleanup QUERY


    -> when request arrives
        -> CHECK if token_valid_until... > local time
                -> GET PUBLIC KEY FROM LOCAL MEMORY STORE
                        - IF it does not have it
                            -> GET PUBLIC KEY BY UUID
                            -> put it local store
                            -> validate
                                ....

                        - IF NOT GO to database and get it
                            - if it has it -> validate
                            - if not fail it


